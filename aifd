#!/usr/bin/env bash

#
# Anti Import from Derivation
#

set -eo pipefail

_err() { echo >&2 "[ERROR] $*"; }
_info() { echo >&2 "[INFO] $*"; }
_pref() { stdbuf -oL -eL sed "s|^|$*|"; }

_sha() {
  cat "$@" | sha256sum | cut -d " " -f1 || true
}

_run() {
  local index=$1
  local entry_json=$2
  local files=("${@:3}")
  local cmd=$(dasel select -r json --plain --null ".cmd" <<<"$entry_json")

  if [[ $cmd == "null" ]]; then
    _err "no command specified"
    return 1
  fi

  local sha=$(dasel select -r json --plain --null ".sha" <<<"$entry_json")
  local new_sha=$(_sha "${files[@]}" <(echo "$cmd"))

  if [[ $sha != $new_sha ]]; then
    if [[ -n $_dry ]]; then
      _info "has changes, doing nothing due to dry run"
      return
    fi
    if (eval "set -ex; $cmd") >&2; then
      if dasel put string -f "$manifest" ".[$index].sha" "$new_sha"; then :
      else
        _err "failed to update manifest file '$manifest'"
        return 1
      fi
    else
      _err "command failed (exit $?)"
      return 1
    fi
  else
    _info "no changes"
  fi
}

_read_files() {
  local _entry_json=$1
  local _files
  local _has_err
  for _f in \
    $(dasel select -r json --plain -m ".files.[*]" <<<"$_entry_json" 2>/dev/null \
      || dasel select -r json --plain ".files" <<<"$_entry_json" 2>/dev/null \
      || true)
  do
    if _files+=($(compgen -G "$_f")); then :
    else
      _err "could not find file '$_f'"
      _has_err=1
    fi
  done
  IFS=$'\n' sort <<<"${_files[*]}"
  unset IFS
  if [[ -n $_has_err ]]; then
    return 1
  fi
}

_entry() {
  local _index=$1
  dasel select -w json -f "$manifest" ".[$_index]"
}

_read_manifest() {
  local _index
  local _entry_json
  local _files
  (cd "$(dirname "$(realpath "$manifest")")"
    for _index in "$@"; do
      _entry_json=$(_entry "$_index")
      mapfile -t _files < <(_read_files "$_entry_json")
      if [[ -n $_list_files ]]; then
        IFS=$'\n' echo "${_files[*]}"
        unset IFS
      else
        _run "$_index" "$_entry_json" "${_files[@]}" 2> >(_pref "#$_index ${_files[*]}: " >&2) || true
      fi
    done
  )
}

_read_indexes() {
  dasel select -m --plain -f "$manifest" '.-'
}

_usage() {
  echo >&2 "$*
Usage: $(basename "$0") [OPTIONS] [FILE]

Options:
    -h          Print this message
    -e INDEX    Run specific entry
    -l          List input files
    -n          Dry run
    -d          Debug output
"
  exit 2
}

while getopts he:lnd opt; do
  case $opt in
    h|\?) _usage;;
    e) _entries+=("$OPTARG");;
    l) _list_files=1;;
    n) _dry=1;;
    d) _debug=1;;
  esac
done
shift $((OPTIND - 1))

if [ -n "$_debug" ]; then set -x; fi

manifest=${1:-$(compgen -G ".aifd.*" | head -n1)}
if [[ ! -f $manifest ]]; then
  _err "can't read '$manifest'"
  exit 1
fi
manifest=$(realpath "$manifest")
_info "reading from $manifest"

if [[ -z $_entries ]]; then
  mapfile -t _entries < <(_read_indexes)
fi

_read_manifest "${_entries[@]}"
